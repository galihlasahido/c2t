Index: Makefile
===================================================================
RCS file: /usr/cvs/cashcow/Makefile,v
retrieving revision 1.5
diff -u -u -r1.5 Makefile
--- Makefile	4 Aug 2003 11:16:30 -0000	1.5
+++ Makefile	9 Aug 2003 14:32:50 -0000
@@ -5,7 +5,7 @@
 #SOLARIS= -lsocket
 LIBS=-L.  -lssl -lcrypto $(SOLARIS)
 INCLUDES=-I/usr/include/ssl -I/usr/include/openssl -I/usr/local/include/ssl -I/usr/local/ssl/include -I/usr/src/linux/include
-SHAREDOBJS=cashcow.o psiputils.o sslclient.o crypt.o
+SHAREDOBJS=cashcow.o psiputils.o sslclient.o crypt.o iso8583.o
 PSIPOBJS=main.o
 MODULES=libcashcow.so
 #DEFINES=-g -DDEBUG
Index: cashcow.c
===================================================================
RCS file: /usr/cvs/cashcow/cashcow.c,v
retrieving revision 1.41
diff -u -u -r1.41 cashcow.c
--- cashcow.c	7 Aug 2003 11:25:49 -0000	1.41
+++ cashcow.c	9 Aug 2003 14:32:50 -0000
@@ -4,10 +4,12 @@
 #include <string.h>
 #include <time.h>
 #include <errno.h>
+#include "iso8583.h"
 #include "crypt.h"
 #include "cashcow.h"
 #include "psiputils.h"
 #include "sslclient.h"
+
 extern int errno;
 
 #define TIMESTAMP_SIZE 25
@@ -43,6 +45,138 @@
 char PassPhrase[256];
 char RC4Key[256];
 
+const isodef pbsmg20[] = {
+    /*000*/ {ISO_NUMERIC, 0, 4, "Message Type Indicator"},
+    /*001*/ {ISO_BITMAP, 0, 16, "Bitmap"},
+    /*002*/ {ISO_NUMERIC, 2, 19, "Primary Account number"},
+    /*003*/ {ISO_NUMERIC, 0, 6, "Processing Code"},
+    /*004*/ {ISO_NUMERIC, 0, 12, "Amount, Transaction"},
+    /*005*/ {ISO_NUMERIC, 0, 12, "Amount, Reconciliation"},
+    /*006*/ {ISO_NUMERIC, 0, 12, "Amount, Cardholder billing"},
+    /*007*/ {ISO_NUMERIC, 0, 10, "Date and time, transmission"},
+    /*008*/ {ISO_NUMERIC, 0, 8, "Amount, Cardholder billing fee"},
+    /*009*/ {ISO_NUMERIC, 0, 8, "Conversion rate, Reconciliation"},
+    /*010*/ {ISO_NUMERIC, 0, 8, "Conversion rate, Cardholder billing"},
+    /*011*/ {ISO_NUMERIC, 0, 6, "Systems trace audit number"},
+    /*012*/ {ISO_NUMERIC, 0, 12, "Date and time, Local transaction"},
+    /*013*/ {ISO_NUMERIC, 0, 4, "Date, Effective"},
+    /*014*/ {ISO_NUMERIC, 0, 4, "Date, Expiration"},
+    /*015*/ {ISO_NUMERIC, 0, 6, "Date, Settlement"},
+    /*016*/ {ISO_NUMERIC, 0, 4, "Date, Conversion"},
+    /*017*/ {ISO_NUMERIC, 0, 4, "Date, Capture"},
+    /*018*/ {ISO_NUMERIC, 0, 4, "Merchant type"},
+    /*019*/ {ISO_NUMERIC, 0, 3, "Country code, Acquiring institution"},
+    /*020*/ {ISO_NUMERIC, 0, 3, "Country code, Primary account number"},
+    /*021*/ {ISO_NUMERIC, 0, 3, "Country code, Forwarding institution"},
+    /*022*/ {ISO_ALPHANUMERIC, 0, 12, "Point of service data code"},
+    /*023*/ {ISO_NUMERIC, 0, 3, "Card sequence number"},
+    /*024*/ {ISO_NUMERIC, 0, 3, "Function code"},
+    /*025*/ {ISO_NUMERIC, 0, 4, "Message reason code"},
+    /*026*/ {ISO_NUMERIC, 0, 4, "Card acceptor business code"},
+    /*027*/ {ISO_NUMERIC, 0, 1, "Approval code length"},
+    /*028*/ {ISO_NUMERIC, 0, 6, "Date, Reconciliation"},
+    /*029*/ {ISO_NUMERIC, 0, 3, "Reconciliation indicator"},
+    /*030*/ {ISO_NUMERIC, 0, 24, "Amounts, original"},
+    /*031*/ {ISO_ALPHANUMERIC, 2, 99, "Acquirer reference data"},
+    /*032*/ {ISO_NUMERIC, 2, 11, "Acquirer institution identification code"},
+    /*033*/ {ISO_NUMERIC, 2, 11, "Forwarding institution identification code"},
+    /*034*/ {ISO_ALPHANUMERIC, 2, 28, "Primary account number, extended"},
+    /*035*/ {ISO_ALPHANUMERIC, 2, 37, "Track 2 data"},
+    /*036*/ {ISO_ALPHANUMERIC, 3, 104, "Track 3 data"},
+    /*037*/ {ISO_ALPHANUMERIC, 0, 12, "Retrieval reference number"},
+    /*038*/ {ISO_ALPHANUMERIC, 0, 6, "Approval code"},
+    /*039*/ {ISO_NUMERIC, 0, 3, "Action code"},
+    /*040*/ {ISO_NUMERIC, 0, 3, "Service code"},
+    /*041*/ {ISO_ALPHANUMERIC, 0, 8, "Card acceptor terminal identification"},
+    /*042*/ {ISO_ALPHANUMERIC, 0, 15, "Card acceptor identification code"},
+    /*043*/ {ISO_ALPHANUMERIC, 2, 99, "Card acceptor name/location"},
+    /*044*/ {ISO_ALPHANUMERIC, 2, 99, "Additional response data"},
+    /*045*/ {ISO_ALPHANUMERIC, 2, 76, "Track 1 data"},
+    /*046*/ {ISO_ALPHANUMERIC, 3, 204, "Amounts, Fees"},
+    /*047*/ {ISO_ALPHANUMERIC, 3, 999, "Additional data - national"},
+    /*048*/ {ISO_ALPHANUMERIC, 3, 999, "Additional data - private"},
+    /*049*/ {ISO_ALPHANUMERIC, 0, 3, "Currency code, Transaction"},
+    /*050*/ {ISO_ALPHANUMERIC, 0, 3, "Currency code, Reconciliation"},
+    /*051*/ {ISO_ALPHANUMERIC, 0, 3, "Currency code, Cardholder billing"},
+    /*052*/ {ISO_BINARY, 0, 8, "Personal identification number, PIN) data"},
+    /*053*/ {ISO_BINARY, 2, 48, "Security related control information"},
+    /*054*/ {ISO_ALPHANUMERIC, 3, 120, "Amounts, additional"},
+    /*055*/ {ISO_BINARY, 3, 255, "IC card system related data"},
+    /*056*/ {ISO_BINARY, 3, 255, "Original data elements"},
+    /*057*/ {ISO_NUMERIC, 0, 3, "Authorization life cycle code"},
+    /*058*/ {ISO_NUMERIC, 2, 11, "Authorizing agent institution Id Code"},
+    /*059*/ {ISO_ALPHANUMERIC, 3, 999, "Transport data"},
+    /*060*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*061*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*062*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*063*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*064*/ {ISO_BINARY, 0, 8, "Message authentication code field"},
+    /*065*/ {ISO_BINARY, 0, 8, "Reserved for ISO use"},
+    /*066*/ {ISO_ALPHANUMERIC, 3, 204, "Amounts, original fees"},
+    /*067*/ {ISO_NUMERIC, 0, 2, "Extended payment data"},
+    /*068*/ {ISO_NUMERIC, 0, 3, "Country code, receiving institution"},
+    /*069*/ {ISO_NUMERIC, 0, 3, "Country code, settlement institution"},
+    /*070*/ {ISO_NUMERIC, 0, 3, "Country code, authorizing agent Inst."},
+    /*071*/ {ISO_NUMERIC, 0, 8, "Message number"},
+    /*072*/ {ISO_ALPHANUMERIC, 3, 999, "Data record"},
+    /*073*/ {ISO_NUMERIC, 0, 6, "Date, action"},
+    /*074*/ {ISO_NUMERIC, 0, 10, "Credits, number"},
+    /*075*/ {ISO_NUMERIC, 0, 10, "Credits, reversal number"},
+    /*076*/ {ISO_NUMERIC, 0, 10, "Debits, number"},
+    /*077*/ {ISO_NUMERIC, 0, 10, "Debits, reversal number"},
+    /*078*/ {ISO_NUMERIC, 0, 10, "Transfer, number"},
+    /*079*/ {ISO_NUMERIC, 0, 10, "Transfer, reversal number"},
+    /*080*/ {ISO_NUMERIC, 0, 10, "Inquiries, number"},
+    /*081*/ {ISO_NUMERIC, 0, 10, "Authorizations, number"},
+    /*082*/ {ISO_NUMERIC, 0, 10, "Inquiries, reversal number"},
+    /*083*/ {ISO_NUMERIC, 0, 10, "Payments, number"},
+    /*084*/ {ISO_NUMERIC, 0, 10, "Payments, reversal number"},
+    /*085*/ {ISO_NUMERIC, 0, 10, "Fee collections, number"},
+    /*086*/ {ISO_NUMERIC, 0, 16, "Credits, amount"},
+    /*087*/ {ISO_NUMERIC, 0, 16, "Credits, reversal amount"},
+    /*088*/ {ISO_NUMERIC, 0, 16, "Debits, amount"},
+    /*089*/ {ISO_NUMERIC, 0, 16, "Debits, reversal amount"},
+    /*090*/ {ISO_NUMERIC, 0, 10, "Authorizations, reversal number"},
+    /*091*/ {ISO_NUMERIC, 0, 3, "Country code, transaction Dest. Inst."},
+    /*092*/ {ISO_NUMERIC, 0, 3, "Country code, transaction Orig. Inst."},
+    /*093*/ {ISO_NUMERIC, 2, 11, "Transaction Dest. Inst. Id code"},
+    /*094*/ {ISO_NUMERIC, 2, 11, "Transaction Orig. Inst. Id code"},
+    /*095*/ {ISO_ALPHANUMERIC, 2, 99, "Card issuer reference data"},
+    /*096*/ {ISO_BINARY, 3, 999, "Key management data"},
+    /*097*/ {ISO_NUMERIC, 0, 1+16, "Amount, Net reconciliation"}, /* was ISO_AMOUNT */
+    /*098*/ {ISO_ALPHANUMERIC, 0, 25, "Payee"},
+    /*099*/ {ISO_ALPHANUMERIC, 2, 11, "Settlement institution Id code"},
+    /*100*/ {ISO_NUMERIC, 2, 11, "Receiving institution Id code"},
+    /*101*/ {ISO_ALPHANUMERIC, 2, 17, "File name"},
+    /*102*/ {ISO_ALPHANUMERIC, 2, 28, "Account identification 1"},
+    /*103*/ {ISO_ALPHANUMERIC, 2, 28, "Account identification 2"},
+    /*104*/ {ISO_ALPHANUMERIC, 3, 100, "Transaction description"},
+    /*105*/ {ISO_NUMERIC, 0, 16, "Credits, Chargeback amount"},
+    /*106*/ {ISO_NUMERIC, 0, 16, "Debits, Chargeback amount"},
+    /*107*/ {ISO_NUMERIC, 0, 10, "Credits, Chargeback number"},
+    /*108*/ {ISO_NUMERIC, 0, 10, "Debits, Chargeback number"},
+    /*109*/ {ISO_ALPHANUMERIC, 2, 84, "Credits, Fee amounts"},
+    /*110*/ {ISO_ALPHANUMERIC, 2, 84, "Debits, Fee amounts"},
+    /*111*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for ISO use"},
+    /*112*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for ISO use"},
+    /*113*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for ISO use"},
+    /*114*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for ISO use"},
+    /*115*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for ISO use"},
+    /*116*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*117*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*118*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*119*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*120*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*121*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*122*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for national use"},
+    /*123*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*124*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*125*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*126*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*127*/ {ISO_ALPHANUMERIC, 3, 999, "Reserved for private use"},
+    /*128*/ {ISO_BINARY, 0, 8, "Message authentication code field"}
+};
+
 
 /*
  * Check if a file can be opened in correct mode.
@@ -331,6 +465,9 @@
     }
 
     size = mkauthorizereq(a, result, 0);
+#ifdef DEBUG
+    dump("areq", result, size);
+#endif
 
     do {
         rsize = sendPSIP(result, size, pbsresponse, sizeof(pbsresponse),
@@ -464,93 +601,72 @@
 
 PbsResponse ParseCaptureResponse(char *input)
 {
-    char bitmap[] = { 0x70, 0x10, 0x00, 0x02, 0x02, 0xd0, 0x81, 0x00 };
+    int action = PBS_RESPONSE_SYSTEM_ERROR;
     int response;
     int p = sizeof(struct pgtmheader);
-    char tmp[258];
-    int action;
-
-    char *data[] = {
-        tmp,
-        tmp,
-        tmp,
-        tmp,
-        tmp,
-        (char *) &action,
-        tmp,
-        tmp,
-        tmp,
-        tmp,
-        tmp,
-        tmp                     /* der er vist lidt mange...  */
-    };
+    isomsg m;
 
 #ifdef DEBUG
     printf("network response: %d\n", ((struct pgtmheader *) input)->response);
 #endif
 
     if (((struct pgtmheader *) input)->response == 0) {
-        sscanf(&input[p], "PSIP100%3d1230%*8c", &response);
+        sscanf(&input[p], "PSIP100%3d", &response);
 
 #ifdef DEBUG
         printf("PGW response: %3d\n", response);
 #endif
 
-        p += 22;
+        p += 10;
         if (response == 0) {    /* network response... */
-            unpack(bitmap, &input[p], data);
-            return action;
+            iso8583_init(&m);
+            iso8583_unpack(&m, pbsmg20, &input[p]);
+
+            action = atoi(m.fld[39]);
+
+            iso8583_free(&m);
         }
-        else
-            return (PBS_RESPONSE_SYSTEM_ERROR);
     }
-    else
-        return PBS_RESPONSE_SYSTEM_ERROR;
+
+    return action;
 }
 
 PbsResponse ParseAuthResponse(char *input, struct Transaction * a)
 {
-    char bitmap[] = { 0x70, 0x10, 0x00, 0x02, 0x06, 0xd0, 0x81, 0x00 };
+    int action = PBS_RESPONSE_SYSTEM_ERROR;
     int response;
     int p = sizeof(struct pgtmheader);
-    char tmp[300];
-    char amount[13];
-    int action;
-
-    char *data[] = {
-        a->card_number,
-        tmp,
-        amount,
-        tmp,
-        tmp,
-        a->result_approval,
-        (char *) &action,
-        tmp,
-        tmp,
-        tmp,
-        tmp,
-        a->result_ticket
-    };
+    isomsg m;
+    char tmp[20];
+    int len;
+
 #ifdef DEBUG
     printf("network response: %d\n", ((struct pgtmheader *) input)->response);
 #endif
     if (((struct pgtmheader *) input)->response == 0) {
-        sscanf(&input[p], "PSIP100%3d1100%*8c", &response);
+        sscanf(&input[p], "PSIP100%3d", &response);
 
 #ifdef DEBUG
         printf("PGW response: %3d\n", response);
 #endif
 
-        p += 22;
+        p += 10;
         if (response == 0) {
-            unpack(bitmap, &input[p], data);
-            return action;
+            iso8583_init(&m);
+            iso8583_unpack(&m, pbsmg20, &input[p]);
+
+            strncpy(a->card_number, m.fld[2], 21);
+            strncpy(a->result_approval, m.fld[38], 7);
+            action = atoi(m.fld[39]);
+            sprintf(tmp, "%%0%dd", pbsmg20[56].lenflds);
+            sscanf(m.fld[56], tmp, &len);
+            memcpy(a->result_ticket, m.fld[56], len + pbsmg20[56].lenflds);
+
+            iso8583_free(&m);
         }
-        else
-            return PBS_RESPONSE_SYSTEM_ERROR;
     }
-    else
-        return PBS_RESPONSE_SYSTEM_ERROR;
+
+    return action;
 }
 
 
@@ -568,6 +684,18 @@
  */
 int validTransaction(struct Transaction *t)
 {
+    int i;
+
+    /* Terminal ID and merchant number must be space filled */
+    for (i = strlen(t->merchant_terminalid); i < 8; i++) {
+        t->merchant_terminalid[i] = 0x20;
+    }
+    t->merchant_terminalid[i] = 0x00;
+    for (i = strlen(t->merchant_number); i < 15; i++) {
+        t->merchant_number[i] = 0x20;
+    }
+    t->merchant_number[i] = 0x00;
+
     /* Merchant name, street and city combined with three
      * backslashes must be < 83  (MG 2.0, p. 33) */
     if ((strlen(t->merchant_name) + strlen(t->merchant_address) +
Index: psiputils.c
===================================================================
RCS file: /usr/cvs/cashcow/psiputils.c,v
retrieving revision 1.23
diff -u -u -r1.23 psiputils.c
--- psiputils.c	2 Aug 2003 22:02:01 -0000	1.23
+++ psiputils.c	9 Aug 2003 14:32:50 -0000
@@ -1,34 +1,17 @@
+#include <stdlib.h>
 #include <string.h>
 #include <time.h>
+#include "iso8583.h"
 #include "cashcow.h"
 #include "psiputils.h"
 
 #include <stdio.h>
 
-struct ISOField as[] = {
-    {2, "s", 19, 1, 0, 0},
-    {3, "06d", 6, 0, 0, 0},
-    {4, "12s", 12, 0, 0, 0},
-    {12, "12s", 12, 0, 0, 0},
-    {14, "4s", 4, 0, 0, 0},
-    {22, "12s", 12, 0, 0, 0},
-    {24, "03d", 3, 0, 0, 0},
-    {25, "04d", 4, 0, 0, 0},
-    {26, "04d", 4, 0, 0, 0},
-    {31, "s", 20, 1, 1, 0},
-
-    {38, "6s", 6, 0, 0, 0},
-    {39, "03d", 3, 0, 0, 0},
-
-    {41, "-8s", 8, 0, 1, 0},
-    {42, "-15s", 15, 0, 1, 0},
-    {43, "s", 99, 1, 1, 0},
-    {44, "s", 99, 1, 1, 0},
-    {47, "s", 27, 2, 0, 0},
-    {49, "03d", 3, 0, 0, 0},
+#ifdef WINNT
+#define snprintf _snprintf
+#endif
 
-    {56, "s", 255, 2, 0, 1}
-};
+extern const isodef pbsmg20[];
 
 unsigned char cp850[] = {
     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
@@ -79,128 +62,6 @@
     strftime(result, 13, "%y%m%d%H%M%S", ta);
 }
 
-int printfield(int n, char *valueptr, unsigned char *result)
-{
-    int i = 0;
-    int length;
-    char fmt[10];
-    char fmt0[10];
-    char value[256];
-    char value2[256];
-
-    while (i * sizeof(struct ISOField) < sizeof(as) && as[i].number != n)
-        i++;
-
-    sprintf(fmt, "%%%s", as[i].format);
-
-    sprintf(value, fmt, valueptr);
-    strncpy(value2, value, as[i].length + 1);
-
-    if (as[i].variable) {
-        if (as[i].binary == 0) {
-            sprintf(fmt0, "%%0%dd%%s", as[i].variable + 1);
-            sprintf(result, fmt0, strlen(value2), value2);
-            length = strlen(result);
-        }
-        else {
-            sprintf(fmt0, "%%0%dd", as[i].variable + 1);
-            sscanf(valueptr, fmt0, &length);
-            length += as[i].variable + 1;
-            memcpy(result, valueptr, length);
-        }
-    }
-    else {
-        strcpy(result, value2);
-        length = strlen(result);
-    }
-
-    /* recode to cp850 */
-
-    if (as[i].specialchars)
-        for (i = 0; i < strlen(result); i++) {
-            result[i] = cp850[result[i]];
-        }
-    return length;
-}
-
-int scanfield(int n, char *input, char *result)
-{
-    int i = 0, p = 0, q = 0;
-    int length;
-    char fmt[20];
-    char fmt0[20];
-
-    while (i * sizeof(struct ISOField) < sizeof(as) && as[i].number != n)
-        i++;
-
-
-    if (as[i].format[0] == '-')
-        q = 1;
-
-    length = as[i].length;
-    if (as[i].variable) {
-        sprintf(fmt0, "%%0%dd", as[i].variable + 1);
-        sscanf(input, fmt0, &length);
-        sprintf(fmt, "%%%d%s", length, &as[i].format[q]);
-        p += 1 + as[i].variable;
-    }
-    else
-        sprintf(fmt, "%%%s", &as[i].format[q]);
-
-    if (as[i].binary) {
-        memcpy(result, input, length + p);
-        result[length + p] = 0;
-    }
-    else if (fmt[strlen(fmt) - 1] == 's') {
-        memcpy(result, &input[p], length);
-        result[length] = 0;
-    }
-    else
-        sscanf(&input[p], fmt, result);
-
-    return length + 2 * (as[i].variable != 0);
-}
-
-
-int pack(char *bitmap, char **data, char *result)
-{
-    int i, m;
-    int p = 0, c = 0;
-
-    if (bitmap[0] & 0x80)
-        m = 16;
-    else
-        m = 8;
-
-    memcpy(result, bitmap, m);
-    p = m;
-    for (i = 1; i < m * 8; i++) {
-        if ((bitmap[i >> 3] << (i % 8)) & 0x80) {
-            p += printfield(i + 1, data[c], &result[p]);
-            c++;
-        }
-    }
-    return p;
-}
-
-void unpack(char *bitmap, char *input, char **result)
-{
-    int i, m;
-    int p = 0, c = 0;
-
-    if (bitmap[0] & 0x80)
-        m = 128;
-    else
-        m = 64;
-
-    bitmap[0] &= 0x7f;
-    for (i = 0; i < m; i++) {
-        if ((bitmap[i >> 3] << (i % 8)) & 0x80) {
-            p += scanfield(i + 1, &input[p], result[c]);
-            c++;
-        }
-    }
-}
 
 struct pgtmheader header = {
     {0, 0},
@@ -212,259 +73,426 @@
 };
 
 
-
 int mkcreditreq(struct Transaction *a, char *result, int function_code)
 {
-    char now[13];
+    isomsg m;
     char merchant_info[200];
     int size = 0;
-    char creditbitmap[] = { 0x70, 0x14, 0x05, 0x42, 0x06, 0xe2, 0x81, 0x00 };
-    char expiry[5];
-    char amount[13];
-    char poscode[13];
     int p;
+    char tmp[20];
+    int len;
 
-    char *creditdata[] = {
-        a->card_number,
-        (char *) 200000,
-        amount,
-        now,
-        expiry,
-        poscode,
-        (char *) function_code,
-        (char *) 4814,          /* ex. merchant_business */
-        a->transaction_reference,
-        a->result_approval,
-        (char *) a->result_action,
-        a->merchant_terminalid,
-        a->merchant_number,
-        merchant_info,
-        "                           ",  /* purchase ident, blank for now */
-        (char *) a->transaction_currency,
-        a->result_ticket
-    };
+    
+    iso8583_init(&m);
 
-
-    memcpy(result, &header, sizeof(struct pgtmheader));
-    p = sizeof(struct pgtmheader);
-    p += sprintf(&result[p], "PSIP100000%04d", 1220);
-
-    sprintf(amount, "%012ld", a->transaction_amount);
-    sprintf(expiry, "%02d%02d", a->card_expiryyear % 100,
+    len = 4;
+    m.fld[0] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[0], "1220", len);
+    m.fld[0][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->card_number) < 19 ? strlen(a->card_number) : 19;
+    m.fld[2] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[2], a->card_number, len);
+    m.fld[2][len] = 0;
+
+    len = 6;
+    m.fld[3] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[3], "200000", len);
+    m.fld[3][len] = 0;
+
+    len = 12;
+    m.fld[4] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[4], len+1, "%012ld", a->transaction_amount);
+
+    len = 12;
+    m.fld[12] = malloc((len+1) * sizeof(char));
+    mklocaltime(m.fld[12]);
+    m.fld[12][len] = 0;
+
+    len = 4;
+    m.fld[14] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[14], len+1, "%02d%02d", a->card_expiryyear % 100,
             a->card_expirymonth);
 
+    len = 12;
+    m.fld[22] = malloc((len+1) * sizeof(char));
     switch (a->merchant_poscode) {
     case POS_ECOMMERCE_SSL:
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
-
     case POS_ECOMMERCE_PLAIN:
-        strcpy(poscode, "L00500L00130");
+        strncpy(m.fld[22], "L00500L00130", len);
         break;
-
     case POS_PRESENT_MAGNETIC:
-        strcpy(poscode, "200101J00120");
+        strncpy(m.fld[22], "200101J00120", len);
         break;
-
     case POS_PRESENT_MANUAL:
-        strcpy(poscode, "200101600120");
+        strncpy(m.fld[22], "200101600120", len);
         break;
-
     case POS_MAILORDER:
-        strcpy(poscode, "100020600110");
+        strncpy(m.fld[22], "100020600110", len);
         break;
-
     case POS_PHONEORDER:
-        strcpy(poscode, "100030600110");
+        strncpy(m.fld[22], "100030600110", len);
         break;
-
     default:                   /* SSL */
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
     }
+    m.fld[22][len] = 0;
 
-    mkmerchantinfo(merchant_info, a);
-    mklocaltime(now);
+    len = 3;
+    m.fld[24] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[24], len+1, "%03d", function_code);
+
+    len = 4;
+    m.fld[26] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[26], "4814", len);
+    m.fld[26][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->transaction_reference) < 99 ? strlen(a->transaction_reference) : 99;
+    m.fld[31] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[31], a->transaction_reference, len);
+    m.fld[31][len] = 0;
+
+    len = 6;
+    m.fld[38] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[38], a->result_approval, len);
+    m.fld[38][len] = 0;
+
+    len = 3;
+    m.fld[39] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[39], len+1, "%03d", a->result_action);
+
+    len = 8;
+    m.fld[41] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[41], a->merchant_terminalid, len);
+    m.fld[41][len] = 0;
+
+    len = 15;
+    m.fld[42] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[42], a->merchant_number, len);
+    m.fld[42][len] = 0;
 
+    mkmerchantinfo(merchant_info, a);
+    /* FIXME: Don't cut silently */
+    len = strlen(merchant_info) < 99 ? strlen(merchant_info) : 99;
+    m.fld[43] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[43], merchant_info, len);
+    m.fld[43][len] = 0;
+
+    len = 27;
+    m.fld[47] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[47], "                           ", len);
+    m.fld[47][len] = 0;
+
+    len = 3;
+    m.fld[49] = malloc((len+1) * sizeof(char));
+    /* FIXME: a->transaction_currency should be a string according to PBS MG20,
+              however we can't change this without breaking things! */
+    /* strncpy(m.fld[49], a->transaction_currency, len); */
+    /* m.fld[49][len] = 0; */
+    snprintf(m.fld[49], len+1, "%03d", a->transaction_currency);
+
+    sprintf(tmp, "%%0%dd", pbsmg20[56].lenflds);
+    sscanf(a->result_ticket, tmp, &len);
+    m.fld[56] = malloc((len+pbsmg20[56].lenflds) * sizeof(char));
+    memcpy(m.fld[56], a->result_ticket, len + pbsmg20[56].lenflds);
 
 
+    memcpy(result, &header, sizeof(struct pgtmheader));
+    p = sizeof(struct pgtmheader);
+    p += sprintf(&result[p], "PSIP100000");
 
-    size = p + pack(creditbitmap, creditdata, &result[p]);
+    size = p + iso8583_pack(&m, pbsmg20, &result[p]);
 
     ((struct pgtmheader *) result)->length[0] = (char) ((size & 0xff00) >> 8);
     ((struct pgtmheader *) result)->length[1] = (char) (size & 0x00ff);
 
+    iso8583_free(&m);
+
     return size;
 }
 
+
 int mkauthorizereq(struct Transaction *a, char *result, int function_code)
 {
-    char now[13];
+    isomsg m;
     char merchant_info[200];
     int size = 0;
-    char authbitmap[] = { 0x70, 0x14, 0x05, 0xc2, 0x00, 0xe2, 0x80, 0x00 };
-    char expiry[5];
-    char amount[13];
-    char poscode[13];
     int p;
-
+    int len;
     char *cvc_code =
         strlen(a->transaction_cvc) == 3 ? a->transaction_cvc : "   ";
 
-    char *authdata[] = {
-        a->card_number,
-        (char *) 0,
-        amount,
-        now,
-        expiry,
-        poscode,
-        (char *) 100,
-        (char *) 0,
-        (char *) 4814,          /* ex. merchant_business */
-        a->transaction_reference,
-        a->merchant_terminalid,
-        a->merchant_number,
-        merchant_info,
-        cvc_code,
-        (char *) a->transaction_currency
-    };
 
-    memcpy(result, &header, sizeof(struct pgtmheader));
-    p = sizeof(struct pgtmheader);
-    p += sprintf(&result[p], "PSIP100000%04d", 1100);
+    iso8583_init(&m);
 
-    sprintf(amount, "%012ld", a->transaction_amount);
-    sprintf(expiry, "%02d%02d", a->card_expiryyear % 100,
+    len = 4;
+    m.fld[0] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[0], "1100", len);
+    m.fld[0][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->card_number) < 19 ? strlen(a->card_number) : 19;
+    m.fld[2] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[2], a->card_number, len);
+    m.fld[2][len] = 0;
+
+    len = 6;
+    m.fld[3] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[3], "000000", len);
+    m.fld[3][len] = 0;
+
+    len = 12;
+    m.fld[4] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[4], len+1, "%012ld", a->transaction_amount);
+
+    len = 12;
+    m.fld[12] = malloc((len+1) * sizeof(char));
+    mklocaltime(m.fld[12]);
+    m.fld[12][len] = 0;
+
+    len = 4;
+    m.fld[14] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[14], len+1, "%02d%02d", a->card_expiryyear % 100,
             a->card_expirymonth);
 
+    len = 12;
+    m.fld[22] = malloc((len+1) * sizeof(char));
     switch (a->merchant_poscode) {
     case POS_ECOMMERCE_SSL:
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
-
     case POS_ECOMMERCE_PLAIN:
-        strcpy(poscode, "L00500L00130");
+        strncpy(m.fld[22], "L00500L00130", len);
         break;
-
     case POS_PRESENT_MAGNETIC:
-        strcpy(poscode, "200101J00120");
+        strncpy(m.fld[22], "200101J00120", len);
         break;
-
     case POS_PRESENT_MANUAL:
-        strcpy(poscode, "200101600120");
+        strncpy(m.fld[22], "200101600120", len);
         break;
-
     case POS_MAILORDER:
-        strcpy(poscode, "100020600110");
+        strncpy(m.fld[22], "100020600110", len);
         break;
-
     case POS_PHONEORDER:
-        strcpy(poscode, "100030600110");
+        strncpy(m.fld[22], "100030600110", len);
         break;
-
     default:                   /* SSL */
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
     }
+    m.fld[22][len] = 0;
 
+    len = 3;
+    m.fld[24] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[24], "100", len);
+    m.fld[24][len] = 0;
+
+    len = 4;
+    m.fld[25] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[25], "0000", len);
+    m.fld[25][len] = 0;
+
+    len = 4;
+    m.fld[26] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[26], "4814", len);
+    m.fld[26][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->transaction_reference) < 99 ? strlen(a->transaction_reference) : 99;
+    m.fld[31] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[31], a->transaction_reference, len);
+    m.fld[31][len] = 0;
+
+    len = 8;
+    m.fld[41] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[41], a->merchant_terminalid, len);
+    m.fld[41][len] = 0;
+
+    len = 15;
+    m.fld[42] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[42], a->merchant_number, len);
+    m.fld[42][len] = 0;
 
     mkmerchantinfo(merchant_info, a);
-    mklocaltime(now);
+    /* FIXME: Don't cut silently */
+    len = strlen(merchant_info) < 99 ? strlen(merchant_info) : 99;
+    m.fld[43] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[43], merchant_info, len);
+    m.fld[43][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(cvc_code) < 999 ? strlen(cvc_code) : 999;
+    m.fld[47] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[47], cvc_code, len);
+    m.fld[47][len] = 0;
+
+    len = 3;
+    m.fld[49] = malloc((len+1) * sizeof(char));
+    /* FIXME: a->transaction_currency should be a string according to PBS MG20,
+              however we can't change this without breaking things! */
+    /* strncpy(m.fld[49], a->transaction_currency, len); */
+    /* m.fld[49][len] = 0; */
+    snprintf(m.fld[49], len+1, "%03d", a->transaction_currency);
 
+    memcpy(result, &header, sizeof(struct pgtmheader));
+    p = sizeof(struct pgtmheader);
+    p += sprintf(&result[p], "PSIP100000");
 
+    size = p + iso8583_pack(&m, pbsmg20, &result[p]);
 
-    size = p + pack(authbitmap, authdata, &result[p]);
     ((struct pgtmheader *) result)->length[0] = (char) ((size & 0xff00) >> 8);
     ((struct pgtmheader *) result)->length[1] = (char) (size & 0x00ff);
-    return size;
-}
-
 
+    iso8583_free(&m);
 
+    return size;
+}
 
 
 int mkcapturereq(struct Transaction *a, char *result, int function_code)
 {
-    char now[13];
+    isomsg m;
     char merchant_info[200];
     int size = 0;
-    char capturebitmap[] = { 0x70, 0x14, 0x05, 0x42, 0x06, 0xe2, 0x81, 0x00 };
-    char expiry[5];
-    char amount[13];
-    char poscode[13];
     int p;
+    char tmp[20];
+    int len;
 
-    char *capturedata[] = {
-        a->card_number,
-        (char *) 0,
-        amount,
-        now,
-        expiry,
-        poscode,
-        (char *) function_code,
-        (char *) 4814,          /* ex. merchant_business */
-        a->transaction_reference,
-        a->result_approval,
-        (char *) a->result_action,
-        a->merchant_terminalid,
-        a->merchant_number,
-        merchant_info,
-        "                           ",  /* purchase ident, blank for now */
-        (char *) a->transaction_currency,
-        a->result_ticket
-    };
-
-
-    memcpy(result, &header, sizeof(struct pgtmheader));
-    p = sizeof(struct pgtmheader);
-    p += sprintf(&result[p], "PSIP100000%04d", 1220);
+    
+    iso8583_init(&m);
 
-    sprintf(amount, "%012ld", a->transaction_amount);
-    sprintf(expiry, "%02d%02d", a->card_expiryyear % 100,
+    len = 4;
+    m.fld[0] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[0], "1220", len);
+    m.fld[0][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->card_number) < 19 ? strlen(a->card_number) : 19;
+    m.fld[2] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[2], a->card_number, len);
+    m.fld[2][len] = 0;
+
+    len = 6;
+    m.fld[3] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[3], "000000", len);
+    m.fld[3][len] = 0;
+
+    len = 12;
+    m.fld[4] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[4], len+1, "%012ld", a->transaction_amount);
+
+    len = 12;
+    m.fld[12] = malloc((len+1) * sizeof(char));
+    mklocaltime(m.fld[12]);
+    m.fld[12][len] = 0;
+
+    len = 4;
+    m.fld[14] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[14], len+1, "%02d%02d", a->card_expiryyear % 100,
             a->card_expirymonth);
 
+    len = 12;
+    m.fld[22] = malloc((len+1) * sizeof(char));
     switch (a->merchant_poscode) {
     case POS_ECOMMERCE_SSL:
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
-
     case POS_ECOMMERCE_PLAIN:
-        strcpy(poscode, "L00500L00130");
+        strncpy(m.fld[22], "L00500L00130", len);
         break;
-
     case POS_PRESENT_MAGNETIC:
-        strcpy(poscode, "200101J00120");
+        strncpy(m.fld[22], "200101J00120", len);
         break;
-
     case POS_PRESENT_MANUAL:
-        strcpy(poscode, "200101600120");
+        strncpy(m.fld[22], "200101600120", len);
         break;
-
     case POS_MAILORDER:
-        strcpy(poscode, "100020600110");
+        strncpy(m.fld[22], "100020600110", len);
         break;
-
     case POS_PHONEORDER:
-        strcpy(poscode, "100030600110");
+        strncpy(m.fld[22], "100030600110", len);
         break;
-
     default:                   /* SSL */
-        strcpy(poscode, "K00500K00130");
+        strncpy(m.fld[22], "K00500K00130", len);
         break;
     }
+    m.fld[22][len] = 0;
 
+    len = 3;
+    m.fld[24] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[24], len+1, "%03d", function_code);
+
+    len = 4;
+    m.fld[26] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[26], "4814", len);
+    m.fld[26][len] = 0;
+
+    /* FIXME: Don't cut silently */
+    len = strlen(a->transaction_reference) < 99 ? strlen(a->transaction_reference) : 99;
+    m.fld[31] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[31], a->transaction_reference, len);
+    m.fld[31][len] = 0;
+
+    len = 6;
+    m.fld[38] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[38], a->result_approval, len);
+    m.fld[38][len] = 0;
+
+    len = 3;
+    m.fld[39] = malloc((len+1) * sizeof(char));
+    snprintf(m.fld[39], len+1, "%03d", a->result_action);
+
+    len = 8;
+    m.fld[41] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[41], a->merchant_terminalid, len);
+    m.fld[41][len] = 0;
+
+    len = 15;
+    m.fld[42] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[42], a->merchant_number, len);
+    m.fld[42][len] = 0;
 
     mkmerchantinfo(merchant_info, a);
-    mklocaltime(now);
-
+    /* FIXME: Don't cut silently */
+    len = strlen(merchant_info) < 99 ? strlen(merchant_info) : 99;
+    m.fld[43] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[43], merchant_info, len);
+    m.fld[43][len] = 0;
+
+    len = 27;
+    m.fld[47] = malloc((len+1) * sizeof(char));
+    strncpy(m.fld[47], "                           ", len);
+    m.fld[47][len] = 0;
+
+    len = 3;
+    m.fld[49] = malloc((len+1) * sizeof(char));
+    /* FIXME: a->transaction_currency should be a string according to PBS MG20,
+              however we can't change this without breaking things! */
+    /* strncpy(m.fld[49], a->transaction_currency, len); */
+    /* m.fld[49][len] = 0; */
+    snprintf(m.fld[49], len+1, "%03d", a->transaction_currency);
+
+    sprintf(tmp, "%%0%dd", pbsmg20[56].lenflds);
+    sscanf(a->result_ticket, tmp, &len);
+    m.fld[56] = malloc((len+pbsmg20[56].lenflds) * sizeof(char));
+    memcpy(m.fld[56], a->result_ticket, len + pbsmg20[56].lenflds);
 
 
+    memcpy(result, &header, sizeof(struct pgtmheader));
+    p = sizeof(struct pgtmheader);
+    p += sprintf(&result[p], "PSIP100000");
 
-    size = p + pack(capturebitmap, capturedata, &result[p]);
+    size = p + iso8583_pack(&m, pbsmg20, &result[p]);
 
     ((struct pgtmheader *) result)->length[0] = (char) ((size & 0xff00) >> 8);
     ((struct pgtmheader *) result)->length[1] = (char) (size & 0x00ff);
 
+    iso8583_free(&m);
 
     return size;
 }
